blueprint:
  name: EV Charging Time Optimizer
  description: Automatically selects the best time to charge the EV based on electricity prices.
  domain: automation
  input:
    battery_capacity:
      name: Battery capacity
      description: The capacity of the EV battery in kWh.
      default: 60
      selector:
        number:
          min: 0
          max: 200
          step: 1
          unit_of_measurement: kWh
    departure_time:
      name: Departure time
      description: The time the car is expected to leave.
      default: "07:00"
      selector:
        time:
    target_soc:
      name: Target SOC %
      description: The target state of charge for the EV battery.
      default: 90
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
    car_soc_entity:
      name: Car SOC sensor
      description: Entity that reports the current state of charge of the EV battery.
      selector:
        entity:
          filter:
            - domain: sensor
    charger_mode_entity:
      name: Charger mode
      description: The mode of the charger.
      selector:
        entity:
          filter:
            - domain: sensor
              integration: zaptec
    price_entity:
      name: Price source
      description: Energy price sensor (e.g., from nordpool integration)
      selector:
        entity:
          filter:
            - domain: sensor
              integration: nordpool
    max_charge_power_entity:
      name: Max charge power (A)
      description: Maximum charging current
      selector:
        entity:
          filter:
            - domain: number
              integration: zaptec
    min_charge_power_entity:
      name: Min charge power (A)
      description: Minimum charging current
      selector:
        entity:
          filter:
            - domain: number
              integration: zaptec
    charge_switch_entity:
      name: Charger ON/OFF switch
      description: Switch to control charging
      selector:
        entity:
          filter:
            - domain: switch
              integration: zaptec
    helper_charge_start_entity:
      name: Helper charge start entity
      description: Helper entity to store the charge start time
      selector:
        entity:
          filter:
            - domain: input_datetime

trigger:
  - platform: time_pattern
    minutes: "/15"
  - platform: state
    entity_id: !input charger_mode_entity
  - platform: state
    entity_id: !input car_soc_entity
  - platform: state
    entity_id: !input price_entity

condition: []

action:
  - variables:
      input_battery_capacity: !input battery_capacity
      input_target_soc: !input target_soc
      input_car_soc_entity: !input car_soc_entity
      input_charger_mode_entity: !input charger_mode_entity
      input_price_entity: !input price_entity
      input_max_charge_power_entity: !input max_charge_power_entity
      input_min_charge_power_entity: !input min_charge_power_entity
      input_charge_switch_entity: !input charge_switch_entity
      input_departure_time: !input departure_time
      input_helper_charge_start_entity: !input helper_charge_start_entity
  
  - variables:
      efficiency_factor: 0.9 # Charger efficiency factor
      battery_capacity: "{{ input_battery_capacity | float }}"
      current_soc: "{{ states(input_car_soc_entity) | float(0) }}"
      target_soc: "{{ input_target_soc | float }}"
      charger_mode: "{{ states(input_charger_mode_entity) }}"
      charge_power_kw: "{{ ((states(input_max_charge_power_entity) | float + states(input_min_charge_power_entity) | float) / 2) * 230 * 3 / 1000 | round(2) }}"
      required_charge_power_kw: "{{ (target_soc - current_soc) * battery_capacity / 100 / efficiency_factor }}"
      hours_to_charge: "{{ ((required_charge_power_kw / charge_power_kw) + 0.5) | int }}"
      current_time: "{{ now() }}"

  - variables:
      cheapest_hours: >-
        {% set current_time = now() %}
        {#- Parse input_departure_time and add it to today's date -#}
        {% set today = current_time.replace(hour=0, minute=0, second=0, microsecond=0) %}
        {% set departure_time = strptime(input_departure_time, '%H:%M:%S').time() %}
        {% set departure = today.replace(hour=departure_time.hour, minute=departure_time.minute, second=departure_time.second) %}
        {#- if departure is in the past, add one day to the departure time -#}
        {% if departure.timestamp() < current_time.timestamp() %}
          {% set departure = departure + timedelta(days=1) %}
        {% endif %}
        {% set ns = namespace(prices=[]) %}
        {% if state_attr(input_price_entity, 'raw_today') is not none %}
          {% for price in state_attr(input_price_entity,'raw_today') -%}
            {% if price.start.timestamp() // 3600 >= current_time.timestamp() // 3600 and price.start.timestamp() // 3600 < departure.timestamp() // 3600 -%}
              {% set ns.prices = ns.prices + [{ 'start': price.start.strftime('%Y-%m-%d %H:%M:%S'), 'start_ts': price.start.timestamp(), 'value': price.value }] -%}
            {% endif -%}
          {% endfor -%}
        {% endif %}
        {% if state_attr(input_price_entity,'raw_tomorrow') is not none %}
          {% for price in state_attr(input_price_entity,'raw_tomorrow') -%}
            {% if price.start.timestamp() // 3600 >= current_time.timestamp() // 3600 and price.start.timestamp() // 3600 < departure.timestamp() // 3600 -%}
              {% set ns.prices = ns.prices + [{ 'start': price.start.strftime('%Y-%m-%d %H:%M:%S'), 'start_ts': price.start.timestamp(), 'value': price.value }] -%}
            {% endif -%}
          {% endfor -%}
        {% endif %}
        {% set future_prices_sorted_by_price = ns.prices | sort(attribute='value') -%}

        {#- take the first hours_to_charge prices -#}
        {% set first_hours_to_charge_prices = future_prices_sorted_by_price[:hours_to_charge] -%}

        {#- sort the first hours_to_charge prices by start time -#}
        {% set first_hours_to_charge_prices_sorted_by_start = first_hours_to_charge_prices | sort(attribute='start_ts') -%}

        {{ first_hours_to_charge_prices_sorted_by_start }}
  - variables:
      first_cheapest_hour: "{{ cheapest_hours[0] }}"
  - variables:
      is_cheapest_hour: >-
        {% set current_time = now() %}
        {% set current_hour = (current_time.timestamp() // 3600) | int %}
        {% set ns = namespace(is_cheapest_hour=false) %}
        {% for price in cheapest_hours -%}
          {% set price_hour = (price.start_ts | int) // 3600 %}
          {% if price_hour == current_hour -%}
            {% set ns.is_cheapest_hour = true -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.is_cheapest_hour }}

  - choose:
      - conditions:
          - and:
              - "{{ is_cheapest_hour }}"
              - "{{ current_soc < target_soc }}"
        sequence:
          - action: input_datetime.set_datetime
            target:
              entity_id: !input helper_charge_start_entity
            data:
              datetime: "{{ cheapest_hours[0].start }}"

          - action: switch.turn_on
            target:
              entity_id: !input charge_switch_entity

      - conditions:
          - or:
              - "{{ not is_cheapest_hour }}"
              - "{{ current_soc >= target_soc }}"
        sequence:
          - action: input_datetime.set_datetime
            target:
              entity_id: !input helper_charge_start_entity
            data:
              datetime: "{{ cheapest_hours[0].start }}"

          - action: switch.turn_off
            target:
              entity_id: !input charge_switch_entity

mode: single
trace:
  stored_traces: 50