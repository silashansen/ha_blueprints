blueprint:
  name: EV Charging Time Optimizer
  description: Automatically selects the best time to charge the EV based on electricity prices.
  domain: automation
  input:
    battery_capacity:
      name: Battery capacity
      description: The capacity of the EV battery in kWh.
      default: 60
      selector:
        number:
          min: 0
          max: 200
          step: 1
          unit_of_measurement: kWh
    departure_time:
      name: Departure time
      description: The time the car is expected to leave.
      default: "07:00"
      selector:
        time:
    target_soc:
      name: Target SOC %
      description: The target state of charge for the EV battery.
      default: 90
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
    car_soc_entity:
      name: Car SOC sensor
      description: Entity that reports the current state of charge of the EV battery.
      selector:
        entity:
          filter:
            - domain: sensor
    charger_mode_entity:
      name: Charger mode
      description: The mode of the charger.
      selector:
        entity:
          filter:
            - domain: sensor
              integration: zaptec
    price_entity:
      name: Price source
      description: Energy price sensor (e.g., from nordpool integration)
      selector:
        entity:
          filter:
            - domain: sensor
              integration: nordpool
    max_charge_power_entity:
      name: Max charge power (A)
      description: Maximum charging current
      selector:
        entity:
          filter:
            - domain: number
              integration: zaptec
    min_charge_power_entity:
      name: Min charge power (A)
      description: Minimum charging current
      selector:
        entity:
          filter:
            - domain: number
              integration: zaptec
    charge_switch_entity:
      name: Charger ON/OFF switch
      description: Switch to control charging
      selector:
        entity:
          filter:
            - domain: switch
              integration: zaptec

    helper_charge_start_entity:
      name: Helper charge start entity
      description: Helper entity to store the charge start time
      selector:
        entity:
          filter:
            - domain: input_datetime
    helper_charge_departure_entity:
      name: Helper charge departure entity
      description: Use this, if you want the departure time to be set by the value of this helper entity.
      default: {}
      selector:
        entity:
          filter:
            - domain: input_datetime

    helper_charge_periods_entity:
      name: Helper charge periods entity
      description: Helper entity to store the charge periods for graphing
      selector:
        entity:
          filter:
            - domain: input_text

trigger:
  - platform: time_pattern
    minutes: "/15"
  - platform: state
    entity_id: !input charger_mode_entity
    to: # null means to ignore attribute changes
  - platform: state
    entity_id: !input car_soc_entity
    to: # null means to ignore attribute changes
  - platform: state
    entity_id: !input price_entity
    to: # null means to ignore attribute changes
  - platform: state
    entity_id: !input helper_charge_departure_entity
    to: # null means to ignore attribute changes

condition: []

action:
  - variables:
      input_battery_capacity: !input battery_capacity
      input_target_soc: !input target_soc
      input_car_soc_entity: !input car_soc_entity
      input_charger_mode_entity: !input charger_mode_entity
      input_price_entity: !input price_entity
      input_max_charge_power_entity: !input max_charge_power_entity
      input_min_charge_power_entity: !input min_charge_power_entity
      input_charge_switch_entity: !input charge_switch_entity
      input_departure_time: !input departure_time
      input_helper_charge_departure_entity: !input helper_charge_departure_entity
      input_helper_charge_start_entity: !input helper_charge_start_entity
      input_helper_charge_periods_entity: !input helper_charge_periods_entity

  - variables:
      efficiency_factor: 0.9 # Charger efficiency factor
      battery_capacity: "{{ input_battery_capacity | float }}"
      current_soc: "{{ states(input_car_soc_entity) | float(0) }}"
      target_soc: "{{ input_target_soc | float }}"
      charger_mode: "{{ states(input_charger_mode_entity) }}"
      charge_power_kw: "{{ ((states(input_max_charge_power_entity) | float + states(input_min_charge_power_entity) | float) / 2) * 230 * 3 / 1000 | round(2) }}"
      required_charge_power_kw: "{{ (target_soc - current_soc) * battery_capacity / 100 / efficiency_factor }}"
      periods_to_charge: "{{ ((required_charge_power_kw / charge_power_kw)) | round(0, 'ceil') | int}}"
      current_time: "{{ now() }}"
      departure: >-
        {% set current_time = now() %}
        {% set selected_departure_time = input_departure_time %}
        {% if input_helper_charge_departure_entity != {} %}
          {% set selected_departure_time = states(input_helper_charge_departure_entity) %}
        {% endif %}

        {% set today = current_time.replace(hour=0, minute=0, second=0, microsecond=0) %}
        {% set departure_time = strptime(selected_departure_time, '%H:%M:%S').time() %}
        {% set departure = today.replace(hour=departure_time.hour, minute=departure_time.minute, second=departure_time.second) %}
        {%- if departure.timestamp() < current_time.timestamp() %}
          {{- (departure + timedelta(days=1)).timestamp() -}}
        {% else %}
          {{- departure.timestamp() -}}
        {% endif %}

  - variables:
      cheapest_periods: >-
        {% set ns = namespace(prices=[], resolution_minutes=60) %}
        {% set current_time = now() %}
        {% set departure_dt = as_datetime(departure) %}
        
        {#- Detect price data resolution by checking time difference between first two entries -#}
        {% if state_attr(input_price_entity, 'raw_today') is not none and state_attr(input_price_entity, 'raw_today') | length > 1 %}
          {% set first_price = state_attr(input_price_entity, 'raw_today')[0] %}
          {% set second_price = state_attr(input_price_entity, 'raw_today')[1] %}
          {% set time_diff_seconds = second_price.start.timestamp() - first_price.start.timestamp() %}
          {% set ns.resolution_minutes = (time_diff_seconds / 60) | int %}
        {% endif %}
        
        {#- Calculate number of periods needed based on resolution -#}
        {% set periods_needed = (periods_to_charge * 60 / ns.resolution_minutes) | round(0, 'ceil') | int %}
        
        {% if state_attr(input_price_entity, 'raw_today') is not none %}
          {% for price in state_attr(input_price_entity,'raw_today') -%}
            {% set period_end = price.start.timestamp() + (ns.resolution_minutes * 60) %}
            {% if period_end > current_time.timestamp() and price.start.timestamp() < departure_dt.timestamp() -%}
              {% set ns.prices = ns.prices + [{ 'start': price.start.strftime('%Y-%m-%d %H:%M:%S'), 'start_ts': price.start.timestamp(), 'value': price.value, 'resolution_minutes': ns.resolution_minutes }] -%}
            {% endif -%}
          {% endfor -%}
        {% endif %}
        {% if state_attr(input_price_entity,'raw_tomorrow') is not none %}
          {% for price in state_attr(input_price_entity,'raw_tomorrow') -%}
            {% set period_end = price.start.timestamp() + (ns.resolution_minutes * 60) %}
            {% if period_end > current_time.timestamp() and price.start.timestamp() < departure_dt.timestamp() -%}
              {% set ns.prices = ns.prices + [{ 'start': price.start.strftime('%Y-%m-%d %H:%M:%S'), 'start_ts': price.start.timestamp(), 'value': price.value, 'resolution_minutes': ns.resolution_minutes }] -%}
            {% endif -%}
          {% endfor -%}
        {% endif %}
        {% set future_prices_sorted_by_price = ns.prices | sort(attribute='value') -%}

        {#- take the first periods_needed prices (adjusted for resolution) -#}
        {% set first_periods_needed_prices = future_prices_sorted_by_price[:periods_needed] -%}

        {#- sort the selected periods by start time -#}
        {% set first_periods_needed_prices_sorted_by_start = first_periods_needed_prices | sort(attribute='start_ts') -%}

        {{ first_periods_needed_prices_sorted_by_start }}
  - variables:
      total_charge_cost: >-
        {% set tariff = 0.9648 %}
        {% set kwh_needed = required_charge_power_kw * efficiency_factor %}
        {% set length_periods = cheapest_periods | length %}
        {% set price_average = cheapest_periods | sum(attribute='value') / length_periods %}
        {{ (price_average + tariff) * kwh_needed }}
  - variables:
      first_cheapest_period: "{{ cheapest_periods[0] }}"
  - variables:
      is_cheapest_period: >-
        {% set current_time = now() %}
        {% set current_timestamp = current_time.timestamp() %}
        {% set ns = namespace(is_cheapest_period=false, resolution_minutes=60) %}
        
        {#- Get resolution from cheapest_periods if available -#}
        {% if cheapest_periods | length > 0 and cheapest_periods[0].resolution_minutes is defined %}
          {% set ns.resolution_minutes = cheapest_periods[0].resolution_minutes %}
        {% endif %}
        
        {% set period_duration_seconds = ns.resolution_minutes * 60 %}
        
        {#- Check if current time falls within any of the cheapest periods -#}
        {% for price in cheapest_periods -%}
          {% set period_start = price.start_ts %}
          {% set period_end = price.start_ts + period_duration_seconds %}
          {% if current_timestamp >= period_start and current_timestamp < period_end -%}
            {% set ns.is_cheapest_period = true -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.is_cheapest_period }}
  - if:
      - "{{ cheapest_periods | length > 0 }}"
    then:
      - action: input_datetime.set_datetime
        target:
          entity_id: !input helper_charge_start_entity
        data:
          datetime: "{{ cheapest_periods[0].start }}"
      - action: python_script.hass_entities
        data:
          action: set_state_attributes
          entity_id: "{{ input_helper_charge_periods_entity }}"
          state: "{{ cheapest_periods[0].start }}"
          attributes:
            - prices: "{{ cheapest_periods | tojson }}"
            - total_charge_cost: "{{ total_charge_cost }}"
  - choose:
      # Criteria for when to start charging
      - conditions:
          - and:
              - "{{ cheapest_periods | length > 0 }}"
              - "{{ is_cheapest_period }}"
              - "{{ current_soc < target_soc }}"
        sequence:
          - action: switch.turn_on
            target:
              entity_id: !input charge_switch_entity

      # Criteria for when to stop charging
      # Note: If charging is not done, but the cheapest period has passed, we will stop charging.
      # This is to avoid charging for a long time if the price is not good.
      # If, however, it's the cheapest period, we will continue charging until the target SOC is reached.
      - conditions:
          # If charging and (not cheapest period before departure or target SOC reached).
          - and:
              - "{{ states(input_charger_mode_entity) == 'connected_charging' }}" # Always only consider stopping if charging
              - or:
                  - and:
                      - "{{ not is_cheapest_period }}" # Not the cheapest period
                      - "{{ now() < as_datetime(departure) }}" # Before departure time
                  - and:
                      - "{{ current_soc >= target_soc }}" # Reached target SOC
        sequence:
          - action: switch.turn_off
            target:
              entity_id: !input charge_switch_entity

mode: single
trace:
  stored_traces: 50
